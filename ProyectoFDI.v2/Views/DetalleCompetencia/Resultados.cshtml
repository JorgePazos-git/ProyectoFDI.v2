@model ProyectoFDI.v2.Models.DetalleCompetencium

@{
    ViewData["Title"] = "Resultados";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

<h1>Agregar Resultados</h1>

<h4>Detalle de la Competencia</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Resultados" onsubmit="agregarClasRes()">
            <input type="hidden" name="returnTo" id="returnTo" value="@ViewBag.ReturnTo" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="IdDetalle" />
            <div class="form-group">
                @*<label asp-for="Puesto" class="control-label">Puesto</label>*@
                <input type="hidden" asp-for="Puesto" class="form-control" />
                <span asp-validation-for="Puesto" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ClasRes" class="control-label">Resultado de Clasificación 1</label>
                <input asp-for="ClasRes" class="form-control" />
                <span asp-validation-for="ClasRes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Resultado de Clasificación 2</label>
                <input id="nuevoClasRes" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="IdDep" class="control-label">Deportista</label>
                <input asp-for="IdDep" value="@(((DetalleCompetencium)ViewBag.data).IdDep)" class="form-control"  />
                <span asp-validation-for="IdDep" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IdCom" class="control-label"></label>
                <input asp-for="IdCom" value="@(((DetalleCompetencium)ViewBag.data).IdCom)" class="form-control" />
                <span asp-validation-for="IdCom" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Guardar" class="btn btn-outline-primary" />
                <button type="button" class="btn btn-outline-danger"><a class="boton" asp-controller="Competencia" asp-action="Resultados">Regresar</a></button>
            </div>
        </form>
    </div>
</div>

<script>
    //function agregarClasRes() {
    //    var nuevoClasRes = document.getElementById('nuevoClasRes').value;
    //    var clasResActual = document.getElementById('ClasRes').value;

    //    if(nuevoClasRes == "fs" || clasResActual == "fs"){
    //        document.getElementById('ClasRes').value;
    //        document.getElementById('ClasRes').value;
    //    }else{
    //        // Convertir los valores a números flotantes
    //        var nuevoClasResNum = parseFloat(nuevoClasRes);
    //        var clasResActualNum = parseFloat(clasResActual);

    //        // Comparar los valores y guardar el número menor
    //        if (nuevoClasResNum < clasResActualNum) {
    //            document.getElementById('ClasRes').value = nuevoClasResNum.toString();
    //        } else {
    //            document.getElementById('ClasRes').value = clasResActualNum.toString();
    //        }
    //    }       
    //}
    function agregarClasRes() {
        var nuevoClasRes = document.getElementById('nuevoClasRes').value;
        var clasResActual = document.getElementById('ClasRes').value;

        // Comprobando si alguno de los valores contiene "fall" o "fs"
        var nuevoEsFall = nuevoClasRes.includes("fall");
        var actualEsFall = clasResActual.includes("fall");
        var nuevoEsFs = nuevoClasRes.includes("fs");
        var actualEsFs = clasResActual.includes("fs");

        // Manejo de todas las combinaciones posibles
        if ((nuevoEsFs && nuevoEsFall) || (actualEsFs && actualEsFall)) {
            // Si ambos contienen "fall" y "fs", tomar "fs"
            document.getElementById('ClasRes').value = "fs";
        } else if (nuevoEsFall || actualEsFall) {
            // Si alguno contiene "fall" y el otro no, tomar el valor numérico si es que existe
            var nuevoNum = parseFloat(nuevoClasRes.replace("fall", ""));
            var actualNum = parseFloat(clasResActual.replace("fall", ""));

            if (!isNaN(nuevoNum) && !isNaN(actualNum)) {
                document.getElementById('ClasRes').value = Math.min(nuevoNum, actualNum).toString();
            } else if (!isNaN(nuevoNum)) {
                document.getElementById('ClasRes').value = nuevoNum.toString();
            } else if (!isNaN(actualNum)) {
                document.getElementById('ClasRes').value = actualNum.toString();
            }
        } else if (nuevoEsFs || actualEsFs) {
            // Si alguno contiene "fs" y el otro no, tomar "fs"
            document.getElementById('ClasRes').value = "fs";
        } else {
            // Si ninguno contiene "fall" ni "fs", comparar valores numéricos
            var nuevoNum = parseFloat(nuevoClasRes);
            var actualNum = parseFloat(clasResActual);

            if (!isNaN(nuevoNum) && !isNaN(actualNum)) {
                document.getElementById('ClasRes').value = Math.min(nuevoNum, actualNum).toString();
            } else if (!isNaN(nuevoNum)) {
                document.getElementById('ClasRes').value = nuevoNum.toString();
            } else if (!isNaN(actualNum)) {
                document.getElementById('ClasRes').value = actualNum.toString();
            }
        }
    }
</script>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
